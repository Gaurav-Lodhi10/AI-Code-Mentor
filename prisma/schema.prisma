// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  submissions   Submission[]
  sessions      Session[]
  progress      Progress[]
  milestones    Milestone[]
  learningPaths LearningPath[]
  recommendations Recommendation[]
}

model Submission {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  problemId   String?      @db.ObjectId
  problemName String
  code        String
  language    String       @default("javascript")
  status      String       @default("submitted") // submitted, analyzed, completed
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  user        User         @relation(fields: [userId], references: [id])
  problem     Problem?     @relation(fields: [problemId], references: [id])
  codeAnalysis CodeAnalysis?
}

model Problem {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  difficulty  String       // easy, medium, hard
  category    String       // arrays, strings, trees, graphs, etc.
  tags        String[]     // ["two-pointers", "hash-map", "sliding-window"]
  leetcodeId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  submissions Submission[]
}

model CodeAnalysis {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  submissionId   String      @unique @db.ObjectId
  strengths      String
  improvements   String
  recommendations String
  timeComplexity String?
  spaceComplexity String?
  score          Float?      // 0-100 score
  createdAt      DateTime    @default(now())
  
  // Relations
  submission     Submission  @relation(fields: [submissionId], references: [id])
}

model LearningPath {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  title       String
  description String
  difficulty  String       // beginner, intermediate, advanced
  estimatedHours Int       @default(0)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  user        User         @relation(fields: [userId], references: [id])
  milestones  Milestone[]
  resources   Resource[]
}

model Milestone {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  learningPathId String      @db.ObjectId
  userId        String       @db.ObjectId
  title         String
  description   String
  isCompleted   Boolean      @default(false)
  completedAt   DateTime?
  order         Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  learningPath  LearningPath @relation(fields: [learningPathId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
}

model Progress {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  category    String       // data-structures, algorithms, etc.
  level       String       // beginner, intermediate, advanced
  score       Float        @default(0) // 0-100
  problemsSolved Int       @default(0)
  totalProblems Int        @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  user        User         @relation(fields: [userId], references: [id])
}

model Recommendation {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  type        String       // problem, resource, concept
  title       String
  description String
  priority    String       @default("medium") // low, medium, high
  isRead      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  user        User         @relation(fields: [userId], references: [id])
}

model Resource {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  learningPathId String?   @db.ObjectId
  title       String
  description String
  type        String       // video, article, practice, book
  url         String?
  category    String       // data-structures, algorithms, etc.
  difficulty  String       // beginner, intermediate, advanced
  duration    Int?         // in minutes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  learningPath LearningPath? @relation(fields: [learningPathId], references: [id])
}

model Session {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  startTime   DateTime     @default(now())
  endTime     DateTime?
  duration    Int?         // in minutes
  problemsSolved Int       @default(0)
  createdAt   DateTime     @default(now())
  
  // Relations
  user        User         @relation(fields: [userId], references: [id])
}
